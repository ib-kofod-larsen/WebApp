@page "/Search"
@using Microsoft.AspNetCore.WebUtilities
@using ikl.web.Shared
@inject DataService DataService
@inject NavigationManager NavManager
@implements IDisposable

<h3>@("Found: " + _drawings.Count + " drawings for '" + _text + "'")</h3>
<MatPaginator Length="@_drawings.Count" PageSize="@pageSize" Page="@OnPage"></MatPaginator>
<div class="cards">
    @foreach (var drawing in _page)
    {
        <DrawingCard Drawing="drawing"/>
    }
</div>

<style>
.cards {
 width: 100%;
display: grid;
grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
grid-auto-rows: auto;
grid-gap: 1rem;
}
</style>

@code {

    int pageSize = 10;
    string _text;
    private List<Drawing> _page = new List<Drawing>();
    private List<Drawing> _drawings = new List<Drawing>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        NavManager.LocationChanged += NavManagerOnLocationChanged;
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        Load(uri);
    }

    private void NavManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        var uri = NavManager.ToAbsoluteUri(e.Location);
         Load(uri);
    }

    private void Load(Uri uri)
    {
        var q = QueryHelpers.ParseQuery(uri.Query);
        if (!q.TryGetValue("q", out var text))
        {
            return;
        }
        _text = text;
        _drawings = DataService.SearchDrawings(_text);
        _page = _drawings.Take(pageSize).ToList();
        StateHasChanged();
    }
    
    private void OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        _page = _drawings.Skip(e.PageSize * e.PageIndex).Take(e.PageSize).ToList();
        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= NavManagerOnLocationChanged;
    }

}