@using ikl.web.Shared
@inject DataService DataService
@inject IJSRuntime JsRuntime
@inject IMatDialogService MatDialogService

<MatCard class="mat-card" >

    <MatCardContent Style="border: 2px solid black; border-radius: 4px; padding: .5rem;" 
            @onclick="() => ShowImage(_drawingId, Drawing.Title)">
        <MatCardMedia
            Wide="true"
            ImageUrl="@("https://ibkofodlarsen.blob.core.windows.net/thumbnails/" + Drawing.Path)"/>
        
        <div class="mat-card-content">
            <MatHeadline6 class="mat-card-clean-margin">
                @Drawing.Title
            </MatHeadline6>
            <MatSubtitle2 class="mat-card-clean-margin">
                @_customer.Names[0]
            </MatSubtitle2>
            <MatSubtitle2 class="mat-card-clean-margin">
                @("Id       : " + _drawingId)
            </MatSubtitle2>
            <MatSubtitle2>
                @("Ratios   : " + string.Join(",", Drawing.Ratios))
            </MatSubtitle2>

        </div>

        @if (!string.IsNullOrEmpty(Drawing.Description))
        {
            <MatSubtitle2>@Drawing.Description</MatSubtitle2>
        }
        else
        {
            <MatSubtitle2>@(Drawing.Date.Year + " - " + _customer.Names[0] + " - " + Drawing.Title)</MatSubtitle2>
        }
    </MatCardContent>
</MatCard>
<style>
.contain-image div {
    
    
    
}
    /* Style the Image Used to Trigger the Modal */
    .click-able-image {
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .hover-image:hover {opacity: 0.7;}

.mat-card {
    max-width: 400px;
}

.mat-card-content {
    padding: 1rem;
}

.mat-card-clean-margin {
    margin: 0px;
}

@@keyframes zoom {
  from {transform:scale(0)}
  to {transform:scale(1)}
}

.close:hover,
.close:focus {
  color: #bbb;
  text-decoration: none;
  cursor: pointer;
}
</style>
@code {
    
    [Parameter]
    public Drawing Drawing { get; set; }

    private Customer _customer;
    private string _drawingId;
    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue(nameof(Drawing), out Drawing drawing))
        {
            _customer = DataService.GetCustomer(drawing.CustomerId);
            _drawingId = drawing.Path.Substring(0, drawing.Path.Length - 4);   
        }
        return base.SetParametersAsync(parameters);
    }
    async Task ShowImage(string drawingId, string title)
    {
        await MatDialogService.OpenAsync(typeof(ShowImageDialog), new MatDialogOptions()
        {
            Attributes = new Dictionary<string, object>()
            {
                {"DrawingId", drawingId},
                { "Title", title}
            },
            SurfaceStyle = "min-width: 50vw; max-width: 90vw;"
        });
    }

    private void ShowOverlay(string drawingId, string caption)
    {
        ((IJSInProcessRuntime) JsRuntime).Invoke<string>("showModal", drawingId, caption);
    }
}